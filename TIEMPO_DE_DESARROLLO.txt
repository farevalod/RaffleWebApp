# TIEMPO DE DESARROLLO DE APLICACIÓN WEB PARA RIFAS

2018-02-03 17:46:52 -0300
- Andamiajes y relaciones de instituciones, grupos, vendedores, talonarios y tickets.
2018-02-03 18:18:41 -0300

2018-02-03 18:28:00 -0300
- Validates de todos los modelos
- Templates HTML y CSS
2018-02-03 19:10:39 -0300

2018-02-03 20:49:05 -0300
- Codigo para crear los boletos cuando se crea los talonarios. Se comentan las acciones `new` y `create` del controlador
de los `tickets`.
2018-02-03 21:18:49 -0300

2018-02-05 16:44:03 -0300
- Creación de relacion has_many-belongs_to entre la institución y los talonarios.
- Arreglo del orden de los listados de elementos en HTML. Ahora simpre se muestra el número primero.
- Se crea el metodo para crear los talonarios cuando se crea el vendedor
- Se comenta la acción `new` en el controlador de los talonarios, pues estos no se deben crear por talonario.
- Cuando un objeto pertenece a otro ya nose muestra su direccion de memoria, sino que su nombre
2018-02-05 17:55:17 -0300

2018-02-05 18:12:25 -0300
- Las funciones para crear los boletos y los talonarios se movieron respectivamente a los modelos de los vendedores y de los talonarios.
- Se terminó la imprementación del codigo para generar los talonarios.
- Implementación de la creación de boletos cuando un talonario se crea automáticamente sin pasar por su controlador.
2018-02-05 18:48:54 -0300

2018-02-05 19:31:06 -0300
- Creación de la columna `user_name` de los vendedores
- Creación de script para generar automáticamente el nombre de usuario a los vendedores en base a su nombre
2018-02-05 20:30:06 -0300

2018-02-05 21:59:22 -0300
- Creación de una función que elimina los tickets y boletos asociados cuando se elimina un vendedor.
2018-02-05 23:27:10 -0300

2018-02-06 12:21:34 -0300
- Creación de la relación de pertenencia entre vendedor e institución
- El script para crear nombres de usuarios ahora evita que estos se repitan dentro de una institución.
2018-02-06 13:13:03 -0300

2018-02-06 13:20:02 -0300
- Creación del controlador de las sesiones de los vendedores
- Lógica para el inicio se sesión
- Formulario de inicio de sesión
- Conexión de las rutas de login con el controlador de sesiones de los vendedores
- Creación del controlador de la página principal de la app
- Definicion de main_page#show como root
2018-02-06 13:49:10 -0300

2018-02-06 14:03:34 -0300
- Cuando se revisan los talonarios, si es que hay una sesión iniciada, ahora solo se  muestran los talonarios del
  usuario respectivo.
- Cuando se entrega el parametro book_id a la acción index de tikets, solo se muestran los boletos del talonario
  respectivo
- Al hacer click en el link 'show' en el listado de talonarios se redirige al listado de los tickets con el parámetro de
  book_id correspondiente.
2018-02-06 14:43:57 -0300

2018-02-06 15:55:03 -0300
- Intento de poner un boton para inciar y cerrar sesión según corresponda.
2018-02-06 16:41:06 -0300

2018-02-06 19:20:28 -0300
- Botón de inicio/cierre de sesión funcionando.
- Andamiaje de los administradores.
- Controlador de las sesiones de los administradores.
2018-02-06 19:56:57 -0300

2018-02-06 20:04:00 -0300
- Logica, formularios y rutas para el inicio de sesión de los administradores.
- El botón de cerrar sesión sirve también para los admins.
- Ahora se muestran las notificaciones.
2018-02-06 20:49:12 -0300

2018-02-07 15:30:13 -0300
- Se añade un poco de css para los formularios.
- Se quita el acceso a los vendedores a las secciones de los administradores (instituciones, grupos y adminstradores).
2018-02-07 16:25:49 -0300

2018-02-07 16:35:06 -0300
- Se implemeta que cuando el administrador ve la información de su institución, también ve los grupos de vendedores.
- Se modifica el listado de los vendores para mostrar solo la opción de Mostrar con un botón.
2018-02-07 17:06:22 -0300

2018-02-07 17:59:00 -0300
- Cuando un admistrador abre un grupo, dentro de la acción show de este se carga el listado de vendedores.
- Cada vendedor del listado posee la opcion mostrar.
2018-02-07 17:59:00 -0300

2018-02-07 18:47:30 -0300
- Se modifica el show de los vendedores para mostrar los datos como tabla
- Se limitan los datos personales que el administrador puede ver del vendedor.
- Se crean funciones para calcular la cantidad de boletos y talonarios vendidos por cada vendedor.
2018-02-07 20:04:44 -0300

2018-02-07 21:35:08 -0300
- Planeación y esquematización de los accesos y permisos que tienen y no tienen cada uno de los tipos de usuarios.
2018-02-07 23:19:30 -0300

2018-02-08 12:13:05 -0300
- Se quita el acceso a los admin de institución a los boletos
- Se se establecen qué talonarios se le mostraran a un super admin, admin o vendedor.
2018-02-08 13:05:02 -0300

2018-02-08 13:20:14 -0300
- Cuando un admin abre un talonario en particular puede ver su información. Cuando lo hace un vendedor es redirigido a
  la página de los boletos correspondientes.
- Se crearon las columas paid y paid_at para los talonarios y los boletos.
2018-02-08 13:45:05 -0300

2018-02-08 14:07:00 -0300
- Funciones para calcular la cantidad de boletos vendidos y los boletos pagados de un talonario.
- Funciones para calcular la cantidad de boletos y talonarios pagados por un vendedor a la institución.
- Se muestra la cantidad de tickets y talonarios pagados al admin cuando abre un vendedor.
- La información de un talonario se ve como tabla. Cuando un admin la ve ahora muestra los boletos vendidos y pagados.
2018-02-08 14:28:06 -0300

2018-02-08 17:33:02 -0300
- Se agrega el botón ingresar pagos a la vista de los talonarios.
- Los admins ven el listado de talonarios de un vendedor bajo sus datos.
- Se crea el controlador de los pagos.
- Se crea el formulario de los pagos en forma de tabla.
- Cuando el admin presiona en ingresar pagos la pagina se recarga mostrando en la base el formulario de pago.
2018-02-08 18:53:35 -0300

2018-02-08 19:26:16 -0300
- Intento de enviar el formulario del pago por un post a payment_path
2018-02-08 19:59:52 -0300

2018-02-09 12:49:21 -0300
- Al ingresar los pagos la pagina se recarga. Si hubo un error el espacio de pagos se sigue mostrando.
  Si se ingresó correctamente entonces no se vuelve a desplegar al recargar.
- Logica de los pagos: Se modifica la cantidad de boletos vendidos solicitados.
2018-02-09 14:12:29 -0300

2018-02-09 14:27:21 -0300
- Se agrega el agrega la fecha y hora a la que se paga un boleto.
- Si el talonario queda totalmente vendido, se merca como vendido y se guarda la fecha hora en que ocurrió.
2018-02-09 14:44:15 -0300

2018-02-09 16:13:22 -0300
- Se implementó que cuando el talonario ya fue completamente pagado se informa al usuario y no se permite seguir
  ingresando boletos pagados.
- Solo se muestran al admin los vendedores de su institución cuando usa la acción index.
2018-02-09 16:42:50 -0300

2018-02-09 16:50:27 -0300
- Se filtra la infomación de los talonarios que los admins pueden ver en la acción index.
2018-02-09 17:25:16 -0300

2018-02-09 17:35:37 -0300
- Se crea la columna sold_at para los tickets y los talonarios.
- Se muestra la fecha de los talonarios vendidos para los admins.
- Se crean los distintos archivos para indexar los vendedores.
2018-02-09 18:04:55 -0300

2018-02-09 18:20:59 -0300
- Se filtran los datos de los vendedores que los admins pueden ver en el indice de vendedores.
- Se calculan y se muestran la cantidad de tickets y talonarios vendidos encada grupo.
- Los datos de los grupos se ponen dentro de una tabla para mejorar su aspecto.
2018-02-09 19:04:06 -0300

2018-02-09 19:27:38 -0300
- En el show de un grupo se muestra la cantidad de vendedores.
- Se limitan los grupos que el admin puede ver a solo los de su institución.
- Se modifican los datos que se muestran en index de grupos para el administrador.
- Se calculan y se muestran los siguientes datos de la institución: Cantidad de administradores, de grupos de venta, de vendedores, de boletos ventidos, de boletos pagados y de talonarios completados.
2018-02-09 20:17:22 -0300

2018-02-09 20:23:59 -0300
- Se crea una función que evita que los admins de isntitución puedan ver o modificar otras instituciones.
- Se crean los archivos html para admis y super admins para show e index del controlador admin.
- Se muestra el listado de admins en el show de la institución.
- Se formatea el show de los admins con tablas.
2018-02-09 21:10:54 -0300

2018-02-09 21:25:26 -0300
- Cuando un admin ve el index de los admins solo ve a los de su institución.
2018-02-09 21:36:40 -0300

2018-02-10 11:28:23 -0300
- Intento de evitar el acceso a instituciones que no fueran la del admin por medio de la URL.
2018-02-10 12:28:58 -0300

2018-02-10 12:42:05 -0300
- Se implementa la restricción para que un administrador no pueda ver instituciones distintas a las suya.
- Cuando un super_admin intenta ingresar a una institución inexistente, se le informa y es redirigido a su institución. (Corregir a futuro, pq no tienen institución)
2018-02-10 13:06:00 -0300

2018-02-10 13:24:18 -0300
- Los admins solo pueden ver los grupos de su institución aunque cambien el número en la URL
- Si un admin ingresa un id de grupo no válido, será redirigido al index de los grupos.
- Se modifica el modelo y el controlador de los vendedores para que solo los usuarios que correspondan puedan acceder
  a las acciones que utilizan el método set_seller
- Se crea un rescue para redirigir al usuario si ingresa una id inexistete.
2018-02-10 14:03:30 -0300

2018-02-19 12:23:07 -0300
- Se crea el método set_corresponding_book en el modelo de los talonarios.
- Se crea el método invalid_book en el controlador de los talonarios para redirigir intentos de acceder a talonarios
  inválidos
- Se crea modifica el método set_book del controlador de los talonarios para llamar al metodo creado en el modelo. En
  los casos que corresponde se llama a invalid_book.
- Se crea un rescue para llamar a invalid_book si el usuario ingresa un id inexistente.
2018-02-19 12:47:17 -0300

2018-02-19 12:55:32 -0300
- Se crea el método set_corresponding_ticket en el modelo de los boletos.
- Se crea el método invalid_ticket en el controlador de los boletos para redirigir intentos de acceder a boletos
  inválidos
- Se modifica el método set_ticket del controlador de los boletos para llamar al método creado en el modelo. En
  los casos que corresponde se llama a invalid_ticket.
- Se crea un rescue para llamar a invalid_ticket si el usuario ingresa un id inexistente.
2018-02-19 13:19:09 -0300

2018-02-19 13:29:24 -0300
- Se modifica el index para admins de los administradores, ahora muestra un botón para agregar admins.
- Se modifica el new de los admins. Se muestra como una tabla y se modifican los datos solicitados.
2018-02-19 13:57:00 -0300

2018-02-19 14:03:03 -0300
- Se agrega la columna rut a la tabla admins.
- Se elimina el metodo admin_params y se crean create_admin_params y update_admin_params.
- Se agregan en id de institución y la contraseña a los parametros entregados por el usuario para crear un admin.
2018-02-19 14:32:27 -0300

2018-02-19 15:35:40 -0300
- Se crea el metodo remove_accent_marks para eliminar las tildes de los nombres de usuario en application_controller
- En application_controller se crean los métodos remove_non_alnum para quitar todos los carácteres que no son
  alfanuméricos y remove_non_numeric para eliminar todos los caracteres no numéricos.
2018-02-19 16:24:32 -0300

2018-02-19 16:30:25 -0300
- En create del controlados de los admins automáticamente se genera el nombre de usuario y el admin_level.


---
-Falta evitar que un admin pueda ver admins de otras instituciones.

A vuelta de vacaciones:
- Hacer que el admin 'cree' los demás elementos
- Ordenar los permisos y la información que se muestra de los vendedores
- Estructurar los super usuarios
- Añadir los mailers: compradores, admins, vendedores.

-----------------------------------------------------------------------------------------------------------------------
Proximos Pasos:


- Configurar información que los vendedores pueden ver
- Opciones de administradores de institución:
    - Aceptar/rechazar solicitudes de un nuevo talonario para vendedores que ya alcanzaron el máximo
      (llega un email con los links necesarios)
    - Crear grupos y agregar vendedores
    - Agregar a otros administradores de la institución

- Opciones de administradores de la app
    - Aceptar/rechazar solicitudes de eliminar o modificar un boleto (llega un email con los links necesarios)
    - Agregar nevas instituciones y sus administradores

- Creación de la tabla de base de datos de Email.

- Envio de email para los administradores
- Envío de email para los vendedores
- Envio de email para los compradores
- Cifrado del email y número de teléfono en los boletos, para evitar el robo de información de la base de datos.
- Implementar opción de que el vendedor pueda solicitar la modificación de algún dato de un boleto, o de informar errores.
  También puede solicitar la eliminación en caso de algún error. Esto último debe ser aceptado pimero por el administrador
  de la institución.

 - Ajax para el formulario de pagos en la vista de los talonarios para los administradores.
 - Se debe evitar que un usario cambaido un numero en la url pueda ver los boletos o talonarios de otros